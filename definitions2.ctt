module definitions2 where

import hott1

--indPath (A : U) (C : (x y : A) -> Path A x y -> U)
--        (c : (x : A) -> C x x (refl A x)) :
--	(x y : A) -> (p : Path A x y) -> C x y p

pathSymInd (A : U) (x y : A) (p : Path A x y) : Path A y x =
  indPath A D d x y p
  where
    D (x y : A) (p : Path A x y) : U = Path A y x
    d (x : A) : D x x (refl A x) = refl A x

-- or this
pathSym (A : U) (x y : A) (p : Path A x y) : Path A y x =
  <i> p @ -i

compPathInd (A : U) (x y z : A) (p : Path A x y) (q : Path A y z) :
  Path A x z =
  (indPath A D d x y p) z q
  where
    D (x y : A) (p : Path A x y) : U =
      (z : A) -> (q : Path A y z) -> Path A x z
    E (x z : A) (q : Path A x z) : U =
      Path A x z
    e (x : A) : E x x (refl A x) = refl A x
    d (x z : A) (q : Path A x z) : E x z q =
      indPath A E e x z q

-- this is better
compPath (A : U) (x y z : A) (p : Path A x y) (q : Path A y z) :
  Path A x z =
  <i> comp (refl U A) (p @ i)
      [ (i = 0) -> refl A x,
        (i = 1) -> q ]

reflComposition (A : U) (x : A) :
  Path (Path A x x) (compPath A x x x (refl A x) (refl A x))
       (refl A x) =
  <k j> comp (refl U A) (refl A x @ k /\ j)
          [ (j = 0) -> refl A x,
            (j = 1) -> refl A x,
            (k = 1) -> <i> refl A x @ k /\ i ]

ru (A : U) (x y : A) (p : Path A x y) :
  Path (Path A x y) p (compPath A x y y p (refl A y)) =
  indPath A D d x y p
  where
    D (x y : A) (p : Path A x y) : U =
      Path (Path A x y) p (compPath A x y y p (refl A y))
    d (x : A) : D x x (refl A x) = <i> reflComposition A x @ -i

lu (A : U) (x y : A) (p : Path A x y) :
  Path (Path A x y) p (compPath A x x y (refl A x) p) =
  indPath A D d x y p
  where
    D (x y : A) (p : Path A x y) : U =
      Path (Path A x y) p (compPath A x x y (refl A x) p)
    d (x : A) : D x x (refl A x) = <i> reflComposition A x @ -i

lemma2 (A : U) (x y : A) (p : Path A x y) :
  Path (Path A y y) (compPath A y x y (pathSym A x y p) p) (refl A y) =
  indPath A D d x y p
  where
    D (x y : A) (p : Path A x y) : U =
      Path (Path A y y) (compPath A y x y (pathSym A x y p) p) (refl A y)
    d (x : A) : D x x (refl A x) = reflComposition A x

lemma3 (A : U) (x y : A) (p : Path A x y) :
  Path (Path A x y) (pathSym A y x (pathSym A x y p)) p =
  indPath A D d x y p
  where
    D (x y : A) (p : Path A x y) : U =
      Path (Path A x y) (pathSym A y x (pathSym A x y p)) p
    d (x : A) : D x x (refl A x) = refl (Path A x x) (refl A x)

-- FFFFFFFFFUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU
lemma4Ind
    (A : U) (x y z w : A) (p : Path A x y)
    (q : Path A y z) (r : Path A z w) :
  Path (Path A x w) (compPath A x y w p (compPath A y z w q r))
                    (compPath A x z w (compPath A x y z p q) r) =
  undefined

loopSpace (A : U) (a : A) : U = Path A a a
loopSpace2 (A : U) (a : A) : U = Path (Path A a a) (refl A a) (refl A a)

rWhiskering (A : U) (a b c : A) (p q : Path A a b)
  (alpha : Path (Path A a b) p q) (r : Path A b c) :
  Path (Path A a c) (compPath A a b c p r) (compPath A a b c q r) =
  <i> compPath A a b c (alpha @ i) r

lWhiskering (A : U) (a b c : A) (r s : Path A b c) (q : Path A a b)
  (beta : Path (Path A b c) r s) :
  Path (Path A a c) (compPath A a b c q r) (compPath A a b c q s) =
  <i> compPath A a b c q (beta @ i)

horizontalComp (A : U) (a b c : A) (p q : Path A a b) (r s : Path A b c)
  (alpha : Path (Path A a b) p q) (beta : Path (Path A b c) r s) :
  Path (Path A a c) (compPath A a b c p r) (compPath A a b c q s) =
  compPath (Path A a c)
    (compPath A a b c p r)
    (compPath  A a b c q r)
    (compPath A a b c q s)
    (rWhiskering A a b c p q alpha r)
    (lWhiskering A a b c r s q beta)

apInd (A B : U) (f : A -> B) (x y : A)
      (p : Path A x y) : Path B (f x) (f y) =
   indPath A D d x y p
   where
     D (x y : A) (p : Path A x y) : U = Path B (f x) (f y)
     d (x : A) : D x x (refl A x) = refl B (f x)

-- DOUBLE FFFFUUUU
ap (A B : U) (f : A -> B) (x y : A)
   (p : Path A x y) : Path B (f x) (f y) =
   <i> f (p @ i)

trans (A : U) (P : A -> U) (x y : A) (p : Path A x y) : P x -> P y =
  indPath A D d x y p
  where
    D (x y : A) (p : Path A x y) : U = P x -> P y
    d (x : A) : D x x (refl A x) = idfun (P x)
