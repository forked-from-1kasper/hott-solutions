module definitions3 where
import hott2
import contr

isSet (A : U) : U = (x y : A) ->
  (p q : Path A x y) -> Path (Path A x y) p q
Set : U = (A : U) * (isSet A)

unitTypeIsSet : isSet Unit =
  \(x y : Unit) (p q : Path Unit x y) ->
    unitPathUniq x y p q

emptyTypeIsSet : isSet Empty =
  \(x y : Empty) (p q : Path Empty x y) ->
    recEmpty (Path (Path Empty x y) p q) x

Type1 (A : U) : U =
  (x y : A) -> (p q : Path A x y) ->
  (r s : Path (Path A x y) p q) ->
    Path (Path (Path A x y) p q) r s

setIsType1 (A : Set) : Type1 A.1 = undefined

negationOfDoubleNegation (A : U) : not (not (not A) -> A) =
  undefined

negationOfLawOfExcludedMiddle (A : U) : not (Coproduct A (not A)) = split
  inl a -> negationOfDoubleNegation A (\(h : (A -> Empty) -> Empty) -> a)
  inr a -> negationOfDoubleNegation A (\(h : (A -> Empty) -> Empty) ->
    recEmpty A (h a))

isProp (P : U) : U = (x y : P) -> (Path P x y)
Prop : U = (P : U) * (isProp P)

propEquivUnit (P : Prop) (x : P.1) : EquivTrivial P.1 Unit =
  (\(x : P.1) -> tt,
   pair (\(y : Unit) -> x, unitIsContr tt)
        (\(y : Unit) -> x, P.2 x))

propEquivTrivial (P Q : Prop)
  (f : P.1 -> Q.1) (g : Q.1 -> P.1) : EquivTrivial P.1 Q.1 =
  (f, pair (g, \(x : Q.1) -> Q.2 (f (g x)) x)
           (g, \(y : P.1) -> P.2 (g (f y)) y))

-- from lectures from cubicaltt repository
propIsSet (P : Prop) : isSet P.1 =
  \(x y : P.1) (p q : Path P.1 x y) ->
    <j i> comp (refl U P.1) x
      [ (i = 0) -> P.2 x x,
        (i = 1) -> P.2 x y,
        (j = 0) -> P.2 x (p @ i),
        (j = 1) -> P.2 x (q @ i) ]

isPropIsProp (P : U) : isProp (isProp P) =
  \(f g : isProp P) ->
    <i> \(x y : P) -> propIsSet (P, f) x y (f x y) (g x y) @ i

isSetIsProp (P : U) : isProp (isSet P) =
  \(f g : isSet P) ->
    <i> \(x y : P) (p q : Path P x y) ->
      setIsType1 (P, f) x y p q (f x y p q) (g x y p q) @ i

LEM : U = (A : Prop) -> Sigma A.1 (not A.1)
lawOfDoubleNegation : U = (A : Prop) -> (not (not A.1) -> A.1)
higherLEM : U = (A : U) -> Sigma A (not A)

isDecidable (A : U) : U = Sigma A (not A)
isDecidableFamily (A : U) (B : A -> U) : U = (a : A) -> Sigma (B a) (not (B a))

data trunc (A : U) =
    elem (a : A)
  | uniq (x y : trunc A) <i>
    [ (i = 0) -> x, (i = 1) -> y ]

recTrunc (A : U) (B : Prop) (f : A -> B.1) (g : trunc A -> B.1) :
  (a : A) -> Path B.1 (g (elem a)) (f a) =
  \(a : A) -> B.2 (g (elem a)) (f a)

True : U = Unit
False : U = Empty
And (P Q : U) : U = Tuple P Q
Implies (P Q : U) : U = P -> Q
Iff (P Q : U) : U = Path U P Q
-- Not is already defined
Or (P Q : U) : U = trunc (Sigma P Q)
Forall (A : U) (P : A -> U) : U = (x : A) -> P x
Exists (A : U) (P : A -> U) : U = trunc ((x : A) * (P x))

Intersection (A : U) (P Q : A -> U)
  (p : (x : A) * P x) (q : (x : A) * P x) : U =
  (x : A) * And (P x) (Q x)

Union (A : U) (P Q : A -> U)
  (p : (x : A) * P x) (q : (x : A) * P x) : U =
  (x : A) * Or (P x) (Q x)

AC (X : U) (setX : isSet X)
  (A : X -> U) (setA : (x : X) -> A x)
  (P : (x : X) -> A x -> U)
  (propP : (x : X) -> (a : A x) -> isProp (P x a)) :
  ((x : X) -> trunc ((a : A x) * (P x a))) ->
  trunc ((g : (x : X) -> A x) * ((x : X) -> P x (g x))) = undefined

univTruncProp (A : U) (B : Prop) (f : A -> B.1) : trunc A -> B.1 = split
  elem a -> f a
  uniq x y @ i ->
    B.2 (univTruncProp A B f x) (univTruncProp A B f y) @ i

fromTrunc (P : Prop) : trunc P.1 -> P.1 =
  univTruncProp P.1 P (idfun P.1)

truncIsProp (P : U) : isProp (trunc P) =
  \(x y : trunc P) -> <i> uniq{trunc P} x y @ i

truncIsSet (P : U) : isSet (trunc P) =
  propIsSet (trunc P, truncIsProp P)

truncInv (P : Prop) : (p : trunc P.1) ->
  Path (trunc P.1) p (elem (fromTrunc P p)) = undefined

propEquivTrivialTruncProp (P : Prop) : EquivTrivial P.1 (trunc P.1) =
  (\(p : P.1) -> elem p,
   pair (fromTrunc P,
          \(p : trunc P.1) -> <i> truncInv P p @ -i)
        (fromTrunc P, refl P.1))

propEquivTruncatedProp (P : Prop) : Equiv P.1 (trunc P.1) =
  (\(p : P.1) -> elem p,
   \(p : trunc P.1) ->
     ((fromTrunc P p, truncInv P p),
      \(x : (x : P.1) * (Path (trunc P.1) p (elem x))) -> ?))

contrImpliesProp (A : U) (contr : isContr A) : Tuple A (isProp A) =
  pair contr.1 (\(x y : A) ->
    <i> comp (refl U A) contr.1
      [ (i = 0) -> contr.2 x,
        (i = 1) -> contr.2 y ])

contrImplesEquivToUnit (A : U) (contr : isContr A) : EquivTrivial A Unit =
  (\(a : A) -> tt,
   pair (\(x : Unit) -> contr.1, unitIsContr tt)
        (\(x : Unit) -> contr.1, contr.2))

isContrFamily (A : U) (P : A -> U) (contr : (x : A) -> isContr (P x)) :
  isContr ((x : A) -> P x) =
  (\(x : A) -> (contr x).1,
   \(h : (x : A) -> P x) -> <i> \(x : A) -> (contr x).2 (h x) @ i)