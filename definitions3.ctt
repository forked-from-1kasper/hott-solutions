module definitions3 where
import hott2
import contr

isSet (A : U) : U = (x y : A) ->
  (p q : Path A x y) -> Path (Path A x y) p q

unitTypeIsSet : isSet Unit =
  \(x y : Unit) (p q : Path Unit x y) ->
    unitPathUniq x y p q

emptyTypeIsSet : isSet Empty =
  \(x y : Empty) (p q : Path Empty x y) ->
    recEmpty (Path (Path Empty x y) p q) x

Type1 (A : U) : U = (x y : A) -> (p q : Path A x y) -> (r s : Path (Path A x y) p q) ->
  Path (Path (Path A x y) p q) r s

negationOfDoubleNegation (A : U) : not (not (not A) -> A) =
  undefined

negationOfLawOfExcludedMiddle (A : U) : not (Coproduct A (not A)) = split
  inl a -> negationOfDoubleNegation A (\(h : (A -> Empty) -> Empty) -> a)
  inr a -> negationOfDoubleNegation A (\(h : (A -> Empty) -> Empty) ->
    recEmpty A (h a))

isProp (P : U) : U = (x y : P) -> (Path P x y)
Prop : U = (P : U) * (isProp P)

invProp (P Q : U) (propP : isProp P) (propQ : isProp Q)
  (f : P -> Q) (g : Q -> P) : EquivTrivial P Q =
  (f, pair (g, (\(x : Q) -> propQ (f (g x)) x))
           (g, (\(x : P) -> propP (g (f x)) x)))

LEM : U = (A : U) -> isProp A -> Sigma A (not A)
lawOfDoubleNegation : U = (A : U) -> isProp A -> (not (not A) -> A)
higherLEM : U = (A : U) -> Sigma A (not A)

isDecidable (A : U) : U = Sigma A (not A)
isDecidableFamily (A : U) (B : A -> U) : U = (a : A) -> Sigma (B a) (not (B a))

SetUniverse : U = (A : U) * (isSet A)
PropUniverse : U = (A : U) * (isProp A)

data trunc (A : U) =
    elem (a : A)
  | uniq (x y : trunc A) <i>
    [ (i = 0) -> x, (i = 1) -> y ]

recTrunc (A B : U) (prop : isProp B) (f : A -> B) (g : trunc A -> B) :
  (a : A) -> Path B (g (elem a)) (f a) =
  \(a : A) -> prop (g (elem a)) (f a)

True : U = Unit
False : U = Empty
And (P Q : U) : U = Tuple P Q
Implies (P Q : U) : U = P -> Q
Iff (P Q : U) : U = Path U P Q
-- Not is already defined
Or (P Q : U) : U = trunc (Sigma P Q)
Forall (A : U) (P : A -> U) : U = (x : A) -> P x
Exists (A : U) (P : A -> U) : U = trunc ((x : A) * (P x))

Intersection (A : U) (P Q : A -> U)
  (p : (x : A) * P x) (q : (x : A) * P x) : U =
  (x : A) * And (P x) (Q x)

Union (A : U) (P Q : A -> U)
  (p : (x : A) * P x) (q : (x : A) * P x) : U =
  (x : A) * Or (P x) (Q x)

AC (X : U) (setX : isSet X)
  (A : X -> U) (setA : (x : X) -> A x)
  (P : (x : X) -> A x -> U)
  (propP : (x : X) -> (a : A x) -> isProp (P x a)) :
  ((x : X) -> trunc ((a : A x) * (P x a))) ->
  trunc ((g : (x : X) -> A x) * ((x : X) -> P x (g x))) = undefined