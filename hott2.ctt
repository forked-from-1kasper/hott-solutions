module hott2 where
import definitions2

-- exercise 2.6
equivFunc (A : U) (x y z : A) (p : Path A x y) :
  biinv (Path A y z) (Path A x z) (compPath A x y z p) =
  pair
    (pAndResultToQ, \(q : Path A x z) -> ?)
    (pAndResultToQ, \(q : Path A y z) -> ?)
  where
    pAndResultToQ (q : Path A x z) : Path A y z =
      <i> comp (refl U A) x [ (i = 0) -> p, (i = 1) -> q ]

-- exercise 2.9
coproductUnivProp (A B X : U) :
  BiinvEquiv (Coproduct A B -> X) (Tuple (A -> X) (B -> X)) =
  (func,
   pair (revFunc, lem1)
        (revFunc, lem3))
  where
    mirror (f : A -> X) (g : B -> X) : (Coproduct A B -> X) = split
       inl a -> f a
       inr b -> g b
    func (f : Coproduct A B -> X) : Tuple (A -> X) (B -> X) =
      pair (\(a : A) -> f (inl a)) (\(b : B) -> f (inr b))
    revFunc : (Tuple (A -> X) (B -> X)) -> ((Coproduct A B) -> X) = split
      pair f g -> mirror f g
    lem1 : (x : Tuple (A -> X) (B -> X)) ->
      Path (Tuple (A -> X) (B -> X))
           (pair (\(a : A) -> revFunc x (inl a))
                 (\(b : B) -> revFunc x (inr b))) x = split
      pair f g -> <i> pair (funEq A X f @ i) (funEq B X g @ i)
    lem2 (f : Coproduct A B -> X) : (x : Coproduct A B) ->
      Path X (mirror (\(a : A) -> f (inl a))
                     (\(b : B) -> f (inr b)) x) (f x) = split
        inl a -> refl X (f (inl a))
        inr b -> refl X (f (inr b))
    lem3 (f : Coproduct A B -> X) :
      Path (Coproduct A B -> X)
           (mirror (\(a : A) -> f (inl a))
                   (\(b : B) -> f (inr b))) f =
      <i> \(x : Coproduct A B) -> lem2 f x @ i

-- exercise 2.13
boolEquivBoolTrue : BiinvEquiv Bool Bool =
  (idfun Bool, pair (idfun Bool, refl Bool) (idfun Bool, refl Bool))

notBool : Bool -> Bool = split
  false -> true
  true -> false

notReverse : (x : Bool) -> Path Bool (notBool (notBool x)) x = split
  false -> refl Bool false
  true -> refl Bool true

boolEquivBoolFalse : BiinvEquiv Bool Bool =
  (notBool, pair (notBool, notReverse) (notBool, notReverse))

boolEquivBoolIsBin (e : BiinvEquiv Bool Bool) :
  Coproduct (Path (BiinvEquiv Bool Bool) boolEquivBoolTrue e)
            (Path (BiinvEquiv Bool Bool) boolEquivBoolFalse e) =
  ?

recBoolEquivBool (P : BiinvEquiv Bool Bool -> U)
  (left : P boolEquivBoolTrue)
  (right : P boolEquivBoolFalse)
  (e : BiinvEquiv Bool Bool) : P e =
  lem1 (boolEquivBoolIsBin e)
  where
    lem1 : Coproduct (Path (BiinvEquiv Bool Bool) boolEquivBoolTrue e)
                     (Path (BiinvEquiv Bool Bool) boolEquivBoolFalse e) ->
           P e = split
      inl a -> transport (<i> P (a @ i)) left
      inr b -> transport (<i> P (b @ i)) right

boolEquivEquivBool : BiinvEquiv (BiinvEquiv Bool Bool) Bool =
  (lem1, pair (lem2, lem3) (lem2, lem4))
  where
    lem1 (e : BiinvEquiv Bool Bool) : Bool =
      e.1 true
    lem2 : Bool -> BiinvEquiv Bool Bool = split
      false -> boolEquivBoolFalse
      true -> boolEquivBoolTrue
    lem3 : (x : Bool) -> Path Bool (lem1 (lem2 x)) x = split
      false -> refl Bool false
      true -> refl Bool true
    lem4 (x : BiinvEquiv Bool Bool) :
      Path (BiinvEquiv Bool Bool) (lem2 (lem1 x)) x =
      recBoolEquivBool
        (Path (BiinvEquiv Bool Bool) (lem2 (lem1 x)))
        ?
        ?
        x

-- exercise 2.16
funextFromHomotopy (A : U) (B : A -> U) (f g : (x : A) -> B x)
  (funext : homotopy A B f g -> Path ((x : A) -> B x) f g) :
  BiinvEquiv (Path ((x : A) -> B x) f g)
             ((x : A) -> Path (B x) (f x) (g x)) =
  (lem1, pair (funext, lem2) (funext, ?))
  where
    lem1 (p : Path ((x : A) -> B x) f g) (x : A) : Path (B x) (f x) (g x) =
      <i> (p @ i) x
    lem2 (p : (x : A) -> Path (B x) (f x) (g x)) :
      Path ((x : A) -> Path (B x) (f x) (g x)) (lem1 (funext p)) p = ?

-- exercise 2.17
pathTuple (A A' B B' : U)
  (pathA : Path U A A')
  (pathB : Path U B B') :
  Path U (Tuple A B) (Tuple A' B') =
  <i> Tuple (pathA @ i) (pathB @ i)

equivTuple (A A' B B' : U)
  (equivA : Equiv A A')
  (equivB : Equiv B B') :
  Equiv (Tuple A B) (Tuple A' B') =
  idtoeqv (Tuple A B) (Tuple A' B')
          (pathTuple A A' B B' (ua A A' equivA)
                               (ua B B' equivB))

binaryRelPath (A A' B B' : U)
  (pathA : Path U A A')
  (pathB : Path U B B')
  (R : U -> U -> U) :
  Path U (R A B) (R A' B') =
  <i> R (pathA @ i) (pathB @ i)

binaryRelEquiv (A A' B B' : U)
  (equivA : Equiv A A')
  (equivB : Equiv B B')
  (R : U -> U -> U) :
  Equiv (R A B) (R A' B') =
  idtoeqv (R A B) (R A' B')
          (binaryRelPath A A' B B'
                         (ua A A' equivA)
                         (ua B B' equivB)
                         R)

arrowEquiv (A A' B B' : U)
  (equivA : Equiv A A')
  (equivB : Equiv B B') :
  Equiv (A -> B) (A' -> B') =
  binaryRelEquiv A A' B B' equivA equivB (\(A B : U) -> (A -> B))

coproductEquiv (A A' B B' : U)
  (equivA : Equiv A A')
  (equivB : Equiv B B') :
  Equiv (Coproduct A B) (Coproduct A' B') =
  binaryRelEquiv A A' B B' equivA equivB Coproduct