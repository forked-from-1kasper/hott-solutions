module hott3 where
import definitions3

-- exercise 3.1
setFromEquiv (A B : U) (set : isSet A) (equiv : Equiv A B) : isSet B =
  transport (<i> isSet (Glue B [ (i = 0) -> (A, equiv),
                                 (i = 1) -> (B, equivId B) ])) set

-- exercise 3.4
idContrImpliesProp (A : U) (contr : isContr (A -> A)) : isProp A =
  \(x y : A) -> <i>
    (propFromContr (A -> A) contr (\(_ : A) -> x) (\(_ : A) -> y) @ i) x